generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma" 
}
// output   = "../src/generated/prisma"  gerado pelo prisma generate, pdoe ser apagado pra deixxar o padrao
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Paciente {
  pacId        Int      @id  @default(autoincrement())
  nome    String  @db.VarChar(255)
  idade Decimal?
  password String
  photo String?
  email   String   @unique(map: "email") @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  telefone Int?
  userId  Int @unique(map: "userId")
  User      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: Cascade, map: "Pacientes_ibfk_1")

}

model Agenda_Psicologo{
 id Int @id @default(autoincrement())
 status_disponibilidade Boolean
 isLogged Boolean
 atendimento TipoAtendimento @default(video)
 limiteAtendimento Int
 psicologoId Int @unique(map:"psicologoId")
 psicologo Psicologo    @relation(fields: [psicologoId], references: [psycId], onDelete: NoAction, onUpdate: Cascade, map: "atendimento_ibfk_1")
 
}

model Psicologo {
  psycId     Int     @id @default(autoincrement())
  nome    String?  @db.VarChar(255)
  password String
  photo String?
  email   String   @unique(map: "email") @db.VarChar(255)
  bio    String? @db.VarChar(500)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role Role @default(PSICOLOGO)
  avaliacao Avaliacao[]
  agenda_Psicologo Agenda_Psicologo? //note o “?”: um pscologo tem no máximo 1 agenda
  sessao Sessao[]
}

model User {
  id      Int      @id @default(autoincrement())
  isAnonimo   Boolean  @default(false)
  role Role @default(PACIENTE)
  pacientes    Paciente? //note o “?”: um user tem no máximo 1 paciente
  avaliacao Avaliacao[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sessao Sessao[]
  // atendimento TipoAtendimento? // aqui representa algo notRequired
}


model Avaliacao{
  idStars Int  @id @default(autoincrement())
  sms String @db.VarChar(255)
  userId  Int 
  psicologoId  Int
  User      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: Cascade, map: "stars_ibfk_1")
  psicologo      Psicologo     @relation(fields: [psicologoId], references: [psycId], onDelete: NoAction, onUpdate: Cascade)
  
}
// field>> nome do campo que faz papel de chave estrangeira. references>> nome da pk da tabela original

model LogAtividade {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  tipo      TipoLog
  mensagem  String
  data      DateTime @default(now())
}

model Sessao{
  sessaoId Int @id @default(autoincrement())
  status statusSessao
  userId  Int 
  psicologoId  Int
  User      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: Cascade, map: "Stars_ibfk_1")
  psicologo      Psicologo     @relation(fields: [psicologoId], references: [psycId], onDelete: NoAction, onUpdate: Cascade)
}

enum TipoLog {
  login
  logout
  inicio_triagem
  conclusao_triagem
  inicio_sessao
  fim_sessao
  mensagem
  erro
}
enum  TipoAtendimento {
  video
  chat
}
enum Role {
  PACIENTE
  PSICOLOGO
}


enum statusSessao{
  ativa
  finalizada
}